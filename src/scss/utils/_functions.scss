// =============================================================================
// FUNCTIONS
// =============================================================================

// Color Functions
// =============================================================================

@function lighten-color($color, $percentage) {
  @return lighten($color, $percentage);
}

@function darken-color($color, $percentage) {
  @return darken($color, $percentage);
}

@function rgba-color($color, $alpha) {
  @return rgba($color, $alpha);
}

// Spacing Functions
// =============================================================================

@function spacing($multiplier) {
  @return $spacing-unit * $multiplier;
}

@function rem($pixels) {
  @return #{$pixels / 16}rem;
}

@function em($pixels, $context: 16) {
  @return #{$pixels / $context}em;
}

// Math Functions
// =============================================================================

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function calculate-percentage($target, $container) {
  @return percentage($target / $container);
}

// String Functions
// =============================================================================

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// List Functions
// =============================================================================

@function list-remove($list, $value) {
  $result: ();
  
  @for $i from 1 through length($list) {
    @if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }
  
  @return $result;
}

@function list-contains($list, $value) {
  @return index($list, $value) != null;
}

// Map Functions
// =============================================================================

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
    
    @if $map == null {
      @return null;
    }
  }
  
  @return $map;
}

@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  @if length($keys) == 1 {
    @return map-merge($map, (nth($keys, 1): $value));
  }
  
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    
    @if $current-get == null {
      $current-get: ();
    }
    
    $maps: append($maps, $current-get);
  }
  
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  @return $result;
}

// Utility Functions
// =============================================================================

@function get-z-index($layer) {
  $z-layers: (
    'dropdown': $z-dropdown,
    'sticky': $z-sticky,
    'fixed': $z-fixed,
    'modal-backdrop': $z-modal-backdrop,
    'modal': $z-modal,
    'popover': $z-popover,
    'tooltip': $z-tooltip
  );
  
  @return map-get($z-layers, $layer);
}

@function get-breakpoint($name) {
  $breakpoints: (
    'sm': $breakpoint-sm,
    'md': $breakpoint-md,
    'lg': $breakpoint-lg,
    'xl': $breakpoint-xl,
    '2xl': $breakpoint-2xl
  );
  
  @return map-get($breakpoints, $name);
}

@function get-color($name, $variant: 'base') {
  $colors: (
    'primary': (
      'base': $primary-color,
      'dark': $primary-dark,
      'light': $primary-light
    ),
    'secondary': (
      'base': $secondary-color,
      'dark': $secondary-dark,
      'light': $secondary-light
    ),
    'success': (
      'base': $success-color,
      'dark': $success-dark,
      'light': $success-light
    ),
    'warning': (
      'base': $warning-color,
      'dark': $warning-dark,
      'light': $warning-light
    ),
    'danger': (
      'base': $danger-color,
      'dark': $danger-dark,
      'light': $danger-light
    ),
    'info': (
      'base': $info-color,
      'dark': $info-dark,
      'light': $info-light
    )
  );
  
  @return map-deep-get($colors, $name, $variant);
}

// Validation Functions
// =============================================================================

@function is-color($value) {
  @return type-of($value) == 'color';
}

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-string($value) {
  @return type-of($value) == 'string';
}

@function is-list($value) {
  @return type-of($value) == 'list';
}

@function is-map($value) {
  @return type-of($value) == 'map';
}

@function is-null($value) {
  @return $value == null;
} 