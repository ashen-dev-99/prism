// Prism Theme - Mixins
// =====================================

// ===========================================
// MEDIA QUERY MIXINS
// ===========================================

// Responsive Breakpoints
// ----------------------
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) { @content; }
  }
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  }
  @if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  }
  @if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
  @if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
  @if $breakpoint == 2xl {
    @media (min-width: $breakpoint-2xl) { @content; }
  }
  @if $breakpoint == 3xl {
    @media (min-width: $breakpoint-3xl) { @content; }
  }
}

@mixin respond-below($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-xs - 1px}) { @content; }
  }
  @else if $breakpoint == sm {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  }
  @else if $breakpoint == md {
    @media (max-width: #{$breakpoint-md - 1px}) { @content; }
  }
  @else if $breakpoint == lg {
    @media (max-width: #{$breakpoint-lg - 1px}) { @content; }
  }
  @else if $breakpoint == xl {
    @media (max-width: #{$breakpoint-xl - 1px}) { @content; }
  }
  @else if $breakpoint == 2xl {
    @media (max-width: #{$breakpoint-2xl - 1px}) { @content; }
  }
  @else if $breakpoint == 3xl {
    @media (max-width: #{$breakpoint-3xl - 1px}) { @content; }
  }
}


// Range Media Queries
// -------------------
@mixin respond-between($min, $max) {
  @media (min-width: #{$min}) and (max-width: #{$max - 1px}) { @content; }
}

// Device-Specific Media Queries
// -----------------------------
@mixin mobile-only {
  @media (max-width: #{$breakpoint-md - 1px}) {
    @content;
  }
}

@mixin tablet-only {
  @media (min-width: #{$breakpoint-md}) and (max-width: #{$breakpoint-lg - 1px}) {
    @content;
  }
}

@mixin desktop-only {
  @media (min-width: $breakpoint-lg) { @content; }
}

@mixin touch-device {
  @media (hover: none) and (pointer: coarse) { @content; }
}

@mixin hover-device {
  @media (hover: hover) and (pointer: fine) { @content; }
}

// Print Media Query
// -----------------
@mixin print {
  @media print { @content; }
}

// ===========================================
// TYPOGRAPHY MIXINS
// ===========================================

// Text Truncation
// ---------------
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Text Selection
// --------------
@mixin text-selection($bg-color: $primary-color, $text-color: $white) {
  ::selection {
    background-color: $bg-color;
    color: $text-color;
  }
  
  ::-moz-selection {
    background-color: $bg-color;
    color: $text-color;
  }
}

// Font Smoothing
// --------------
@mixin font-smoothing($value: antialiased) {
  -webkit-font-smoothing: $value;
  -moz-osx-font-smoothing: if($value == antialiased, grayscale, auto);
}

// ===========================================
// LAYOUT MIXINS
// ===========================================

// Flexbox Utilities
// -----------------
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-wrap {
  display: flex;
  flex-wrap: wrap;
}

// Grid Utilities
// --------------
@mixin grid-center {
  display: grid;
  place-items: center;
}

@mixin grid-auto-fit($min-width: 250px) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $spacing-4;
}

@mixin grid-auto-fill($min-width: 250px) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $spacing-4;
}

// Positioning
// -----------
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-cover {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

@mixin sticky-top($offset: 0) {
  position: sticky;
  top: $offset;
  z-index: $z-sticky;
}

// ===========================================
// VISUAL EFFECTS MIXINS
// ===========================================

// Shadows
// -------
@mixin shadow($shadow: $shadow) {
  box-shadow: $shadow;
}

@mixin shadow-hover($shadow: $shadow-lg) {
  transition: box-shadow $transition-fast;
  
  &:hover {
    box-shadow: $shadow;
  }
}

@mixin shadow-focus($color: $primary-color) {
  &:focus {
    box-shadow: 0 0 0 3px color-alpha($color, 0.1);
  }
}

// Backdrop Effects
// ----------------
@mixin backdrop-blur($blur: $backdrop-blur) {
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

@mixin glass-effect($bg: rgba($white, 0.1), $blur: $backdrop-blur) {
  background: $bg;
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border: 1px solid rgba($white, 0.2);
}

// Gradients
// ---------
@mixin gradient-primary($direction: 135deg) {
  background: linear-gradient($direction, $primary-500 0%, $primary-600 100%);
}

@mixin gradient-secondary($direction: 135deg) {
  background: linear-gradient($direction, $secondary-500 0%, $secondary-600 100%);
}

@mixin gradient-success($direction: 135deg) {
  background: linear-gradient($direction, $success-500 0%, $success-600 100%);
}

@mixin gradient-warning($direction: 135deg) {
  background: linear-gradient($direction, $warning-500 0%, $warning-600 100%);
}

@mixin gradient-error($direction: 135deg) {
  background: linear-gradient($direction, $error-500 0%, $error-600 100%);
}

@mixin gradient-info($direction: 135deg) {
  background: linear-gradient($direction, $info-500 0%, $info-600 100%);
}

// ===========================================
// INTERACTION MIXINS
// ===========================================

// Focus States
// ------------
@mixin focus-ring($color: $primary-color, $width: 3px, $offset: 2px) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 $width color-alpha($color, 0.1);
    outline-offset: $offset;
  }
}

@mixin focus-visible($color: $primary-color) {
  &:focus-visible {
    outline: 2px solid $color;
    outline-offset: 2px;
  }
}

// Hover Effects
// -------------
@mixin hover-lift($lift: 2px, $shadow: $shadow-lg) {
  transition: transform $transition-fast, box-shadow $transition-fast;
  
  &:hover {
    transform: translateY(-$lift);
    box-shadow: $shadow;
  }
}

@mixin hover-scale($scale: 1.05) {
  transition: transform $transition-fast;
  
  &:hover {
    transform: scale($scale);
  }
}

@mixin hover-fade($opacity: 0.8) {
  transition: opacity $transition-fast;
  
  &:hover {
    opacity: $opacity;
  }
}

// Active States
// -------------
@mixin active-scale($scale: 0.95) {
  &:active {
    transform: scale($scale);
  }
}

@mixin active-press($depth: 1px) {
  &:active {
    transform: translateY($depth);
  }
}

// ===========================================
// ANIMATION MIXINS
// ===========================================

// Fade Animations
// ---------------
@mixin fade-in($duration: $duration-300, $delay: 0ms) {
  animation: fadeIn $duration $ease-out $delay forwards;
}

@mixin fade-out($duration: $duration-300, $delay: 0ms) {
  animation: fadeOut $duration $ease-out $delay forwards;
}

@mixin fade-in-up($duration: $duration-300, $delay: 0ms) {
  animation: fadeInUp $duration $ease-out $delay forwards;
}

@mixin fade-in-down($duration: $duration-300, $delay: 0ms) {
  animation: fadeInDown $duration $ease-out $delay forwards;
}

@mixin fade-in-left($duration: $duration-300, $delay: 0ms) {
  animation: fadeInLeft $duration $ease-out $delay forwards;
}

@mixin fade-in-right($duration: $duration-300, $delay: 0ms) {
  animation: fadeInRight $duration $ease-out $delay forwards;
}

// Slide Animations
// ----------------
@mixin slide-in-up($duration: $duration-300, $delay: 0ms) {
  animation: slideInUp $duration $ease-out $delay forwards;
}

@mixin slide-in-down($duration: $duration-300, $delay: 0ms) {
  animation: slideInDown $duration $ease-out $delay forwards;
}

@mixin slide-in-left($duration: $duration-300, $delay: 0ms) {
  animation: slideInLeft $duration $ease-out $delay forwards;
}

@mixin slide-in-right($duration: $duration-300, $delay: 0ms) {
  animation: slideInRight $duration $ease-out $delay forwards;
}

// Scale Animations
// ----------------
@mixin scale-in($duration: $duration-300, $delay: 0ms) {
  animation: scaleIn $duration $ease-out $delay forwards;
}

@mixin scale-out($duration: $duration-300, $delay: 0ms) {
  animation: scaleOut $duration $ease-out $delay forwards;
}

@mixin bounce-in($duration: $duration-500, $delay: 0ms) {
  animation: bounceIn $duration $ease-bounce $delay forwards;
}

// Rotation Animations
// -------------------
@mixin rotate-in($duration: $duration-300, $delay: 0ms) {
  animation: rotateIn $duration $ease-out $delay forwards;
}

@mixin spin($duration: 1s) {
  animation: spin $duration linear infinite;
}

@mixin pulse($duration: 2s) {
  animation: pulse $duration ease-in-out infinite;
}

// Stagger Animations
// ------------------
@mixin stagger-children($delay: 100ms) {
  > * {
    animation-delay: calc(var(--stagger-delay, 0) * #{$delay});
  }
}

@mixin stagger-animation($animation, $delay: 100ms, $count: 10) {
  @for $i from 1 through $count {
    &:nth-child(#{$i}) {
      animation-delay: #{$i * $delay};
    }
  }
}

// ===========================================
// COMPONENT MIXINS
// ===========================================

// Button Mixins
// -------------
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  outline: none;
}

@mixin button-base($padding: $btn-padding-y $btn-padding-x) {
  @include button-reset;
  @include flex-center;
  @include focus-ring;
  
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $padding;
  min-height: $btn-height;
  font-family: $font-family-primary;
  font-size: $font-size-sm;
  font-weight: $btn-font-weight;
  line-height: $line-height-tight;
  text-decoration: none;
  border-radius: $btn-border-radius;
  border: $btn-border-width solid transparent;
  transition: $btn-transition;
  cursor: pointer;
  user-select: none;
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@mixin button-variant($bg-color, $text-color: $white, $hover-bg: darken($bg-color, 10%)) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $bg-color;
  
  &:hover:not(:disabled) {
    background-color: $hover-bg;
    border-color: $hover-bg;
  }
  
  &:focus {
    box-shadow: 0 0 0 3px color-alpha($bg-color, 0.1);
  }
}

@mixin button-outline($color, $hover-bg: $color) {
  background-color: transparent;
  color: $color;
  border-color: $color;
  
  &:hover:not(:disabled) {
    background-color: $hover-bg;
    color: $white;
  }
}

@mixin button-ghost($color) {
  background-color: transparent;
  color: $color;
  border-color: transparent;
  
  &:hover:not(:disabled) {
    background-color: color-alpha($color, 0.1);
  }
}

// Input Mixins
// ------------
@mixin input-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  outline: none;
}

@mixin input-base {
  @include input-reset;
  @include focus-ring;
  
  display: block;
  width: 100%;
  height: $input-height;
  padding: $input-padding-y $input-padding-x;
  font-family: $font-family-primary;
  font-size: $font-size-sm;
  line-height: $line-height-normal;
  color: $text-primary;
  background-color: $bg-primary;
  border: $input-border-width solid $border-color;
  border-radius: $input-border-radius;
  transition: border-color $transition-fast, box-shadow $transition-fast;
  
  &::placeholder {
    color: $text-muted;
  }
  
  &:disabled {
    background-color: $bg-muted;
    color: $text-disabled;
    cursor: not-allowed;
  }
}

// Card Mixins
// -----------
@mixin card-base {
  background-color: $bg-primary;
  border: $card-border-width solid $border-color;
  border-radius: $card-border-radius;
  box-shadow: $card-shadow;
  overflow: hidden;
  transition: box-shadow $transition-fast;
}

@mixin card-hover {
  &:hover {
    box-shadow: $card-shadow-hover;
  }
}

// Modal Mixins
// ------------
@mixin modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: $modal-backdrop-bg;
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  z-index: $z-modal-backdrop;
}

@mixin modal-content {
  position: relative;
  background-color: $bg-primary;
  border-radius: $modal-border-radius;
  box-shadow: $modal-shadow;
  max-width: $modal-max-width;
  margin: 0 auto;
  z-index: $z-modal;
}

// Tooltip Mixins
// --------------
@mixin tooltip-base {
  position: relative;
  
  &::before,
  &::after {
    position: absolute;
    opacity: 0;
    visibility: hidden;
    transition: opacity $transition-fast, visibility $transition-fast;
    pointer-events: none;
    z-index: $z-tooltip;
  }
  
  &::before {
    content: attr(data-tooltip);
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: $tooltip-padding;
    background-color: $tooltip-bg;
    color: $tooltip-color;
    font-size: $tooltip-font-size;
    border-radius: $tooltip-border-radius;
    box-shadow: $tooltip-shadow;
    white-space: nowrap;
    margin-bottom: $tooltip-arrow-size;
  }
  
  &::after {
    content: '';
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: $tooltip-arrow-size solid transparent;
    border-right: $tooltip-arrow-size solid transparent;
    border-top: $tooltip-arrow-size solid $tooltip-bg;
  }
  
  &:hover::before,
  &:hover::after {
    opacity: 1;
    visibility: visible;
  }
}

// ===========================================
// UTILITY MIXINS
// ===========================================

// Screen Reader Only
// ------------------
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Clearfix
// --------
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Aspect Ratio
// ------------
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: percentage($height / $width);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Truncate Text
// -------------
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// ===========================================
// KEYFRAME ANIMATIONS
// ===========================================

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInUp {
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    transform: translateY(-100%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes scaleOut {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.9);
  }
}

@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
  70% {
    transform: scale(0.9);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-200deg);
  }
  to {
    opacity: 1;
    transform: rotate(0);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-10px);
  }
  20%, 40%, 60%, 80% {
    transform: translateX(10px);
  }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translateY(0);
  }
  40%, 43% {
    transform: translateY(-30px);
  }
  70% {
    transform: translateY(-15px);
  }
  90% {
    transform: translateY(-4px);
  }
}

@keyframes wiggle {
  0%, 7% {
    transform: rotateZ(0);
  }
  15% {
    transform: rotateZ(-15deg);
  }
  20% {
    transform: rotateZ(10deg);
  }
  25% {
    transform: rotateZ(-10deg);
  }
  30% {
    transform: rotateZ(6deg);
  }
  35% {
    transform: rotateZ(-4deg);
  }
  40%, 100% {
    transform: rotateZ(0);
  }
}