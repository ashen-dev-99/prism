// Prism Theme - Functions
// =====================================

@use "sass:math";

// ===========================================
// COLOR FUNCTIONS
// ===========================================

// Basic Color Manipulation
// ------------------------
@function color-shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@function color-tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function color-alpha($color, $alpha) {
  @return rgba($color, $alpha);
}

// Advanced Color Functions
// ------------------------
@function color-luminance($color) {
  $red: red($color) / 255;
  $green: green($color) / 255;
  $blue: blue($color) / 255;
  
  $red: if($red <= 0.03928, $red / 12.92, pow(($red + 0.055) / 1.055, 2.4));
  $green: if($green <= 0.03928, $green / 12.92, pow(($green + 0.055) / 1.055, 2.4));
  $blue: if($blue <= 0.03928, $blue / 12.92, pow(($blue + 0.055) / 1.055, 2.4));
  
  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

@function color-contrast($color1, $color2) {
  $l1: color-luminance($color1);
  $l2: color-luminance($color2);
  
  @return (max($l1, $l2) + 0.05) / (min($l1, $l2) + 0.05);
}

@function color-invert($color) {
  @return invert($color);
}

@function color-grayscale($color) {
  @return grayscale($color);
}

@function color-sepia($color) {
  @return sepia($color);
}

// Color Palette Functions
// ----------------------
@function color-palette($color, $shade: 500) {
  $palettes: (
    'primary': (
      50: $primary-50,
      100: $primary-100,
      200: $primary-200,
      300: $primary-300,
      400: $primary-400,
      500: $primary-500,
      600: $primary-600,
      700: $primary-700,
      800: $primary-800,
      900: $primary-900,
      950: $primary-950
    ),
    'secondary': (
      50: $secondary-50,
      100: $secondary-100,
      200: $secondary-200,
      300: $secondary-300,
      400: $secondary-400,
      500: $secondary-500,
      600: $secondary-600,
      700: $secondary-700,
      800: $secondary-800,
      900: $secondary-900,
      950: $secondary-950
    ),
    'success': (
      50: $success-50,
      100: $success-100,
      200: $success-200,
      300: $success-300,
      400: $success-400,
      500: $success-500,
      600: $success-600,
      700: $success-700,
      800: $success-800,
      900: $success-900,
      950: $success-950
    ),
    'warning': (
      50: $warning-50,
      100: $warning-100,
      200: $warning-200,
      300: $warning-300,
      400: $warning-400,
      500: $warning-500,
      600: $warning-600,
      700: $warning-700,
      800: $warning-800,
      900: $warning-900,
      950: $warning-950
    ),
    'error': (
      50: $error-50,
      100: $error-100,
      200: $error-200,
      300: $error-300,
      400: $error-400,
      500: $error-500,
      600: $error-600,
      700: $error-700,
      800: $error-800,
      900: $error-900,
      950: $error-950
    ),
    'info': (
      50: $info-50,
      100: $info-100,
      200: $info-200,
      300: $info-300,
      400: $info-400,
      500: $info-500,
      600: $info-600,
      700: $info-700,
      800: $info-800,
      900: $info-900,
      950: $info-950
    ),
    'gray': (
      50: $gray-50,
      100: $gray-100,
      200: $gray-200,
      300: $gray-300,
      400: $gray-400,
      500: $gray-500,
      600: $gray-600,
      700: $gray-700,
      800: $gray-800,
      900: $gray-900,
      950: $gray-950
    )
  );
  
  $palette: map-get($palettes, $color);
  @return map-get($palette, $shade);
}

// ===========================================
// SPACING FUNCTIONS
// ===========================================

// Base Spacing
// ------------
@function spacing($multiplier: 1) {
  @return $spacing-md * $multiplier;
}

@function space($size) {
  $spaces: (
    '0': $spacing-0,
    'px': $spacing-px,
    '0.5': $spacing-0_5,
    '1': $spacing-1,
    '1.5': $spacing-1_5,
    '2': $spacing-2,
    '2.5': $spacing-2_5,
    '3': $spacing-3,
    '3.5': $spacing-3_5,
    '4': $spacing-4,
    '5': $spacing-5,
    '6': $spacing-6,
    '7': $spacing-7,
    '8': $spacing-8,
    '9': $spacing-9,
    '10': $spacing-10,
    '11': $spacing-11,
    '12': $spacing-12,
    '14': $spacing-14,
    '16': $spacing-16,
    '20': $spacing-20,
    '24': $spacing-24,
    '28': $spacing-28,
    '32': $spacing-32,
    '36': $spacing-36,
    '40': $spacing-40,
    '44': $spacing-44,
    '48': $spacing-48,
    '52': $spacing-52,
    '56': $spacing-56,
    '60': $spacing-60,
    '64': $spacing-64,
    '72': $spacing-72,
    '80': $spacing-80,
    '96': $spacing-96
  );
  
  @return map-get($spaces, $size);
}

// Unit Conversion
// ---------------
@function rem($pixels, $base: 16) {
  @return math.div($pixels, $base) * 1rem;
}

@function em($pixels, $base: 16) {
  @return math.div($pixels, $base) * 1em;
}

@function px($value) {
  @return $value * 1px;
}

// ===========================================
// TYPOGRAPHY FUNCTIONS
// ===========================================

// Font Size
// ---------
@function font-size($size) {
  $sizes: (
    'xs': $font-size-xs,
    'sm': $font-size-sm,
    'base': $font-size-base,
    'lg': $font-size-lg,
    'xl': $font-size-xl,
    '2xl': $font-size-2xl,
    '3xl': $font-size-3xl,
    '4xl': $font-size-4xl,
    '5xl': $font-size-5xl,
    '6xl': $font-size-6xl,
    '7xl': $font-size-7xl,
    '8xl': $font-size-8xl,
    '9xl': $font-size-9xl
  );
  
  @return map-get($sizes, $size);
}

// Font Weight
// -----------
@function font-weight($weight) {
  $weights: (
    'thin': $font-weight-thin,
    'extralight': $font-weight-extralight,
    'light': $font-weight-light,
    'normal': $font-weight-normal,
    'medium': $font-weight-medium,
    'semibold': $font-weight-semibold,
    'bold': $font-weight-bold,
    'extrabold': $font-weight-extrabold,
    'black': $font-weight-black
  );
  
  @return map-get($weights, $weight);
}

// Line Height
// -----------
@function line-height($height) {
  $heights: (
    'none': $line-height-none,
    'tight': $line-height-tight,
    'snug': $line-height-snug,
    'normal': $line-height-normal,
    'relaxed': $line-height-relaxed,
    'loose': $line-height-loose
  );
  
  @return map-get($heights, $height);
}

// Letter Spacing
// --------------
@function letter-spacing($spacing) {
  $spacings: (
    'tighter': $letter-spacing-tighter,
    'tight': $letter-spacing-tight,
    'normal': $letter-spacing-normal,
    'wide': $letter-spacing-wide,
    'wider': $letter-spacing-wider,
    'widest': $letter-spacing-widest
  );
  
  @return map-get($spacings, $spacing);
}

// ===========================================
// LAYOUT FUNCTIONS
// ===========================================

// Z-Index
// -------
@function z($layer) {
  $z-layers: (
    'auto': $z-auto,
    '0': $z-0,
    '10': $z-10,
    '20': $z-20,
    '30': $z-30,
    '40': $z-40,
    '50': $z-50,
    'dropdown': $z-dropdown,
    'sticky': $z-sticky,
    'fixed': $z-fixed,
    'modal-backdrop': $z-modal-backdrop,
    'modal': $z-modal,
    'popover': $z-popover,
    'tooltip': $z-tooltip,
    'toast': $z-toast
  );
  
  @return map-get($z-layers, $layer);
}

// Breakpoints
// -----------
@function breakpoint($name) {
  $breakpoints: (
    'xs': $breakpoint-xs,
    'sm': $breakpoint-sm,
    'md': $breakpoint-md,
    'lg': $breakpoint-lg,
    'xl': $breakpoint-xl,
    '2xl': $breakpoint-2xl,
    '3xl': $breakpoint-3xl
  );
  
  @return map-get($breakpoints, $name);
}

// Container Widths
// ----------------
@function container-width($size) {
  $containers: (
    'xs': $container-xs,
    'sm': $container-sm,
    'md': $container-md,
    'lg': $container-lg,
    'xl': $container-xl,
    '2xl': $container-2xl,
    '3xl': $container-3xl
  );
  
  @return map-get($containers, $size);
}

// ===========================================
// VISUAL EFFECTS FUNCTIONS
// ===========================================

// Shadows
// -------
@function shadow($level) {
  $shadows: (
    'xs': $shadow-xs,
    'sm': $shadow-sm,
    'base': $shadow,
    'md': $shadow-md,
    'lg': $shadow-lg,
    'xl': $shadow-xl,
    '2xl': $shadow-2xl,
    'inner': $shadow-inner,
    'none': $shadow-none
  );
  
  @return map-get($shadows, $level);
}

// Colored Shadows
// ---------------
@function shadow-colored($color, $opacity: 0.15) {
  @return 0 4px 14px 0 rgba($color, $opacity);
}

// Border Radius
// -------------
@function radius($size) {
  $radii: (
    'none': $border-radius-none,
    'sm': $border-radius-sm,
    'base': $border-radius,
    'md': $border-radius-md,
    'lg': $border-radius-lg,
    'xl': $border-radius-xl,
    '2xl': $border-radius-2xl,
    '3xl': $border-radius-3xl,
    'full': $border-radius-full
  );
  
  @return map-get($radii, $size);
}

// Opacity
// -------
@function opacity($level) {
  $opacities: (
    '0': $opacity-0,
    '5': $opacity-5,
    '10': $opacity-10,
    '20': $opacity-20,
    '25': $opacity-25,
    '30': $opacity-30,
    '40': $opacity-40,
    '50': $opacity-50,
    '60': $opacity-60,
    '70': $opacity-70,
    '75': $opacity-75,
    '80': $opacity-80,
    '90': $opacity-90,
    '95': $opacity-95,
    '100': $opacity-100
  );
  
  @return map-get($opacities, $level);
}

// Backdrop Blur
// -------------
@function backdrop-blur($level) {
  $blurs: (
    'none': $backdrop-blur-none,
    'sm': $backdrop-blur-sm,
    'base': $backdrop-blur,
    'md': $backdrop-blur-md,
    'lg': $backdrop-blur-lg,
    'xl': $backdrop-blur-xl,
    '2xl': $backdrop-blur-2xl,
    '3xl': $backdrop-blur-3xl
  );
  
  @return map-get($blurs, $level);
}

// ===========================================
// ANIMATION FUNCTIONS
// ===========================================

// Transition
// ----------
@function transition($property: all, $duration: $transition-normal, $timing: $ease-out) {
  @return $property $duration $timing;
}

// Duration
// --------
@function duration($level) {
  $durations: (
    '75': $duration-75,
    '100': $duration-100,
    '150': $duration-150,
    '200': $duration-200,
    '300': $duration-300,
    '500': $duration-500,
    '700': $duration-700,
    '1000': $duration-1000
  );
  
  @return map-get($durations, $level);
}

// Easing
// ------
@function easing($type) {
  $easings: (
    'linear': $ease-linear,
    'in': $ease-in,
    'out': $ease-out,
    'in-out': $ease-in-out,
    'bounce': $ease-bounce,
    'spring': $ease-spring
  );
  
  @return map-get($easings, $type);
}

// ===========================================
// GRID FUNCTIONS
// ===========================================

// Grid Columns
// ------------
@function grid-columns($columns: 12) {
  @return repeat($columns, 1fr);
}

@function grid-gap($gap: $spacing-md) {
  @return $gap;
}

@function grid-template($rows, $cols) {
  @return $rows / $cols;
}

// ===========================================
// ASPECT RATIO FUNCTIONS
// ===========================================

@function aspect-ratio($width, $height) {
  @return math.div($width, $height);
}

@function aspect-ratio-percentage($width, $height) {
  @return percentage(math.div($height, $width));
}

// ===========================================
// MATH FUNCTIONS
// ===========================================

// Clamp
// -----
@function clamp-value($min, $preferred, $max) {
  @return max($min, min($preferred, $max));
}

// Power
// -----
@function pow($number, $exponent) {
  $value: 1;
  
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: math.div($value, $number);
    }
  }
  
  @return $value;
}

// Square Root
// -----------
@function sqrt($number) {
  $guess: 1;
  $result: 0;
  
  @while abs($result - $guess) > 0.001 {
    $result: $guess;
    $guess: math.div($guess + math.div($number, $guess), 2);
  }
  
  @return $result;
}

// ===========================================
// UTILITY FUNCTIONS
// ===========================================

// String Functions
// ----------------
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// List Functions
// --------------
@function list-join($list1, $list2, $separator: auto) {
  @return join($list1, $list2, $separator);
}

@function list-append($list, $val, $separator: auto) {
  @return append($list, $val, $separator);
}

// Map Functions
// -------------
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  
  @return $map;
}

@function map-deep-set($map, $keys, $value) {
  $map: map-merge($map, ($keys: $value));
  @return $map;
}

// ===========================================
// THEME FUNCTIONS
// ===========================================

// Theme Color
// -----------
@function theme-color($color, $shade: 500) {
  @return color-palette($color, $shade);
}

// Theme Spacing
// -------------
@function theme-spacing($size) {
  @return space($size);
}

// Theme Font Size
// ---------------
@function theme-font-size($size) {
  @return font-size($size);
}

// Theme Shadow
// ------------
@function theme-shadow($level) {
  @return shadow($level);
}

// Theme Radius
// ------------
@function theme-radius($size) {
  @return radius($size);
}

// ===========================================
// COMPONENT FUNCTIONS
// ===========================================

// Button Size
// -----------
@function button-size($size) {
  $sizes: (
    'xs': (
      'font-size': $font-size-xs,
      'padding': $spacing-1 $spacing-2,
      'height': 1.5rem
    ),
    'sm': (
      'font-size': $font-size-sm,
      'padding': $spacing-2 $spacing-3,
      'height': 2rem
    ),
    'md': (
      'font-size': $font-size-base,
      'padding': $spacing-3 $spacing-4,
      'height': 2.5rem
    ),
    'lg': (
      'font-size': $font-size-lg,
      'padding': $spacing-4 $spacing-6,
      'height': 3rem
    ),
    'xl': (
      'font-size': $font-size-xl,
      'padding': $spacing-5 $spacing-8,
      'height': 3.5rem
    )
  );
  
  @return map-get($sizes, $size);
}

// Input Size
// ----------
@function input-size($size) {
  $sizes: (
    'sm': (
      'height': $input-height-sm,
      'padding': $spacing-2 $spacing-3,
      'font-size': $font-size-sm
    ),
    'md': (
      'height': $input-height,
      'padding': $input-padding-y $input-padding-x,
      'font-size': $font-size-base
    ),
    'lg': (
      'height': $input-height-lg,
      'padding': $spacing-4 $spacing-5,
      'font-size': $font-size-lg
    )
  );
  
  @return map-get($sizes, $size);
}

// Card Size
// ---------
@function card-size($size) {
  $sizes: (
    'sm': (
      'padding': $card-padding-sm,
      'border-radius': $border-radius
    ),
    'md': (
      'padding': $card-padding,
      'border-radius': $card-border-radius
    ),
    'lg': (
      'padding': $card-padding-lg,
      'border-radius': $border-radius-xl
    )
  );
  
  @return map-get($sizes, $size);
}